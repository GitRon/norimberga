[project]
name = "norimberga"
version = "1.0.0"
description = "A browser-based city simulation game set in the high middle ages"
authors = [
    {name = "Ronny Vedrilla", email = "ronny.vedrilla@ambient.digital"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django>=5.2,<6.0",
    "django-crispy-forms>=2.1,<3.0",
    "crispy-tailwind>=0.5.0,<1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4,<8.0",
    "pytest-django>=4.5,<5.0",
    "pytest-cov>=4.1,<5.0",
    "factory-boy>=3.3,<4.0",
    "pytest-xdist>=3.8,<4.0",
]

[tool.ruff]
# For linting and formatting
line-length = 120

# Assume Python 3.13.
target-version = "py313"

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*",
]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # Pyflakes
    "N", # pep8-naming
    "I", # isort
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "DTZ", # flake8-datetimez
    "DJ", # flake8-django
    "TD", # flake8-to-do
    "RUF", # Removes unnecessary "#noqa" comments
    "YTT", # Avoid non-future-prove usages of "sys"
    "FBT", # Protects you from the "boolean trap bug"
    "C4", # Checks for unnecessary conversions
    "PIE", # Bunch of useful rules
    "SIM", # Simplifies your code
    "INT", # Validates your gettext translation strings
    "PERF", # Perflint
    "PGH", # No all-purpose "# noqa" and eval validation
    "UP", # PyUpgrade
]
ignore = [
#    'N999', # Project name contains underscore, not fixable
#    'A003', # Django attributes shadow python builtins
#    'DJ012', # Odd ordering of Django model methods
#    'RUF012', # Mutable class attributes should be annotated with `typing.ClassVar`
#    'PERF401', # Use a list comprehension to create a transformed list
    'TD003', # To-Do issue links
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # Pyflakes
    "N", # pep8-naming
    "I", # isort
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "DTZ", # flake8-datetimez
    "DJ", # flake8-django
    "TD", # flake8-to-do
    "RUF", # Removes unnecessary "#noqa" comments
    "YTT", # Avoid non-future-prove usages of "sys"
    "FBT", # Protects you from the "boolean trap bug"
    "C4", # Checks for unnecessary conversions
    "PIE", # Bunch of useful rules
    "SIM", # Simplifies your code
    "INT", # Validates your gettext translation strings
    "PERF", # Perflint
    "PGH", # No all-purpose "# noqa" and eval validation
    "UP", # PyUpgrade
]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Exclude Django migration files
exclude = ["migrations/*.py"]

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "apps.config.settings"
addopts = [
    "--reuse-db",
    "--cov=apps",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=100",
    "-v",
]
testpaths = ["apps"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["apps"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/node_modules/*",
    "*/tests/*",
    "manage.py",
    "apps/config/wsgi.py",
    "apps/config/asgi.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
