# Generated by Django 5.2.6 on 2025-10-04 10:28

from django.db import migrations


def split_water_terrain(apps, schema_editor):
    """
    Split the Water terrain into River and Lake.
    - River: Used for the generated river on the map
    - Lake: Used for all other water tiles
    """
    Terrain = apps.get_model("city", "Terrain")

    # Get or update the existing Water terrain to become Lake
    try:
        water_terrain = Terrain.objects.get(name="Water")
        water_terrain.name = "Lake"
        water_terrain.save()
    except Terrain.DoesNotExist:
        # If Water doesn't exist, create Lake
        Terrain.objects.create(
            name="Lake",
            color_class="bg-blue-500",
            probability=10,
            is_water=True
        )

    # Create River terrain
    Terrain.objects.get_or_create(
        name="River",
        defaults={
            "color_class": "bg-blue-600",
            "probability": 100,  # High probability so it won't be randomly selected
            "is_water": True
        }
    )


def reverse_split_water_terrain(apps, schema_editor):
    """
    Reverse the split by merging River and Lake back into Water.
    """
    Terrain = apps.get_model("city", "Terrain")

    # Delete River terrain
    Terrain.objects.filter(name="River").delete()

    # Rename Lake back to Water
    try:
        lake_terrain = Terrain.objects.get(name="Lake")
        lake_terrain.name = "Water"
        lake_terrain.save()
    except Terrain.DoesNotExist:
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("city", "0035_alter_terrain_color_class"),
    ]

    operations = [
        migrations.RunPython(split_water_terrain, reverse_split_water_terrain),
    ]
